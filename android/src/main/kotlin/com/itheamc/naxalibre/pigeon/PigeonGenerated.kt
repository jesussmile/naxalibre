// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object PigeonGeneratedPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class NaxaLibreEvent 
/** Generated class from Pigeon that represents data sent in messages. */
data class IntEvent (
  val data: Long
) : NaxaLibreEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IntEvent {
      val data = pigeonVar_list[0] as Long
      return IntEvent(data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      data,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is IntEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonGeneratedPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DoubleEvent (
  val data: Double
) : NaxaLibreEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DoubleEvent {
      val data = pigeonVar_list[0] as Double
      return DoubleEvent(data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      data,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is DoubleEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonGeneratedPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class StringEvent (
  val data: String
) : NaxaLibreEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): StringEvent {
      val data = pigeonVar_list[0] as String
      return StringEvent(data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      data,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is StringEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonGeneratedPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class PigeonGeneratedPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IntEvent.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DoubleEvent.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          StringEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is IntEvent -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is DoubleEvent -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is StringEvent -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val PigeonGeneratedPigeonMethodCodec = StandardMethodCodec(PigeonGeneratedPigeonCodec())


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NaxaLibreHostApi {
  fun fromScreenLocation(point: List<Double>): List<Double>
  fun fromScreenLocations(points: List<List<Double>>, callback: (Result<List<List<Any?>>>) -> Unit)
  fun toScreenLocation(latLng: List<Double>): List<Double>
  fun toScreenLocations(listOfLatLng: List<List<Double>>, callback: (Result<List<List<Any?>>>) -> Unit)
  fun getLatLngForProjectedMeters(northing: Double, easting: Double): List<Double>
  fun getVisibleRegion(ignorePadding: Boolean): List<List<Double>>
  fun getProjectedMetersForLatLng(latLng: List<Double>): List<Double>
  fun getCameraPosition(): Map<String, Any>
  fun getZoom(): Double
  fun getHeight(): Double
  fun getWidth(): Double
  fun getMinimumZoom(): Double
  fun getMaximumZoom(): Double
  fun getMinimumPitch(): Double
  fun getMaximumPitch(): Double
  fun getPixelRatio(): Double
  fun isDestroyed(): Boolean
  fun setMaximumFps(fps: Long)
  fun setStyle(style: String)
  fun setSwapBehaviorFlush(flush: Boolean)
  fun setAllGesturesEnabled(enabled: Boolean)
  fun animateCamera(args: Map<String, Any?>)
  fun easeCamera(args: Map<String, Any?>)
  fun zoomBy(by: Double)
  fun zoomIn()
  fun zoomOut()
  fun getCameraForLatLngBounds(bounds: Map<String, Any?>): Map<String, Any?>
  fun queryRenderedFeatures(args: Map<String, Any?>): List<Map<Any?, Any?>>
  fun lastKnownLocation(): List<Double>
  fun setLogoMargins(left: Double, top: Double, right: Double, bottom: Double)
  fun isLogoEnabled(): Boolean
  fun setCompassMargins(left: Double, top: Double, right: Double, bottom: Double)
  fun setCompassImage(bytes: ByteArray)
  fun setCompassFadeFacingNorth(compassFadeFacingNorth: Boolean)
  fun isCompassEnabled(): Boolean
  fun isCompassFadeWhenFacingNorth(): Boolean
  fun setAttributionMargins(left: Double, top: Double, right: Double, bottom: Double)
  fun isAttributionEnabled(): Boolean
  fun setAttributionTintColor(color: Long)
  fun getUri(): String
  fun getJson(callback: (Result<String>) -> Unit)
  fun getLight(): Map<String, Any>
  fun isFullyLoaded(): Boolean
  fun getLayer(id: String): Map<Any?, Any?>
  fun getLayers(): List<Map<Any?, Any?>>
  fun getSource(id: String): Map<Any?, Any?>
  fun getSources(): List<Map<Any?, Any?>>
  fun addImage(name: String, bytes: ByteArray)
  fun addImages(images: Map<String, ByteArray>)
  fun addLayer(layer: Map<String, Any?>)
  fun addSource(source: Map<String, Any?>)
  fun setGeoJsonData(sourceId: String, jsonString: String)
  fun setGeoJsonUri(sourceId: String, uri: String)
  fun addAnnotation(annotation: Map<String, Any?>): Map<String, Any?>
  fun updateAnnotation(id: Long, annotation: Map<String, Any?>): Map<String, Any?>
  fun getAnnotation(id: Long): Map<String, Any?>?
  fun removeLayer(id: String): Boolean
  fun removeLayerAt(index: Long): Boolean
  fun removeSource(id: String): Boolean
  fun removeImage(name: String)
  fun removeAnnotation(args: Map<String, Any?>)
  fun removeAllAnnotations(args: Map<String, Any?>)
  fun showCallout(annotationId: Long, title: String, subtitle: String?)
  fun hideCallout(annotationId: Long)
  fun updateCallout(annotationId: Long, title: String, subtitle: String?)
  fun hideAllCallouts()
  fun getImage(id: String): ByteArray
  fun snapshot(callback: (Result<ByteArray>) -> Unit)
  fun triggerRepaint()
  fun resetNorth()
  fun downloadRegion(args: Map<String, Any?>, callback: (Result<Map<Any?, Any?>>) -> Unit)
  fun cancelDownloadRegion(id: Long, callback: (Result<Boolean>) -> Unit)
  fun getRegion(id: Long, callback: (Result<Map<Any?, Any?>>) -> Unit)
  fun deleteRegion(id: Long, callback: (Result<Boolean>) -> Unit)
  fun deleteAllRegions(callback: (Result<Map<Long, Boolean>>) -> Unit)
  fun listRegions(callback: (Result<List<Map<Any?, Any?>>>) -> Unit)

  companion object {
    /** The codec used by NaxaLibreHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
    /** Sets up an instance of `NaxaLibreHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NaxaLibreHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.fromScreenLocation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pointArg = args[0] as List<Double>
            val wrapped: List<Any?> = try {
              listOf(api.fromScreenLocation(pointArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.fromScreenLocations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pointsArg = args[0] as List<List<Double>>
            api.fromScreenLocations(pointsArg) { result: Result<List<List<Any?>>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.toScreenLocation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val latLngArg = args[0] as List<Double>
            val wrapped: List<Any?> = try {
              listOf(api.toScreenLocation(latLngArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.toScreenLocations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val listOfLatLngArg = args[0] as List<List<Double>>
            api.toScreenLocations(listOfLatLngArg) { result: Result<List<List<Any?>>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLatLngForProjectedMeters$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val northingArg = args[0] as Double
            val eastingArg = args[1] as Double
            val wrapped: List<Any?> = try {
              listOf(api.getLatLngForProjectedMeters(northingArg, eastingArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getVisibleRegion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ignorePaddingArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              listOf(api.getVisibleRegion(ignorePaddingArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getProjectedMetersForLatLng$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val latLngArg = args[0] as List<Double>
            val wrapped: List<Any?> = try {
              listOf(api.getProjectedMetersForLatLng(latLngArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getCameraPosition$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getCameraPosition())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getZoom$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getZoom())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getHeight$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getHeight())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getWidth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getWidth())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMinimumZoom$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getMinimumZoom())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMaximumZoom$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getMaximumZoom())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMinimumPitch$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getMinimumPitch())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getMaximumPitch$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getMaximumPitch())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getPixelRatio$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPixelRatio())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isDestroyed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isDestroyed())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setMaximumFps$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fpsArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.setMaximumFps(fpsArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setStyle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val styleArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.setStyle(styleArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setSwapBehaviorFlush$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val flushArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setSwapBehaviorFlush(flushArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setAllGesturesEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setAllGesturesEnabled(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.animateCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argsArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              api.animateCamera(argsArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.easeCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argsArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              api.easeCamera(argsArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.zoomBy$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val byArg = args[0] as Double
            val wrapped: List<Any?> = try {
              api.zoomBy(byArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.zoomIn$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.zoomIn()
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.zoomOut$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.zoomOut()
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getCameraForLatLngBounds$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val boundsArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              listOf(api.getCameraForLatLngBounds(boundsArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.queryRenderedFeatures$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argsArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              listOf(api.queryRenderedFeatures(argsArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.lastKnownLocation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.lastKnownLocation())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setLogoMargins$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val leftArg = args[0] as Double
            val topArg = args[1] as Double
            val rightArg = args[2] as Double
            val bottomArg = args[3] as Double
            val wrapped: List<Any?> = try {
              api.setLogoMargins(leftArg, topArg, rightArg, bottomArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isLogoEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isLogoEnabled())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setCompassMargins$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val leftArg = args[0] as Double
            val topArg = args[1] as Double
            val rightArg = args[2] as Double
            val bottomArg = args[3] as Double
            val wrapped: List<Any?> = try {
              api.setCompassMargins(leftArg, topArg, rightArg, bottomArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setCompassImage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val bytesArg = args[0] as ByteArray
            val wrapped: List<Any?> = try {
              api.setCompassImage(bytesArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setCompassFadeFacingNorth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val compassFadeFacingNorthArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setCompassFadeFacingNorth(compassFadeFacingNorthArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isCompassEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isCompassEnabled())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isCompassFadeWhenFacingNorth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isCompassFadeWhenFacingNorth())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setAttributionMargins$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val leftArg = args[0] as Double
            val topArg = args[1] as Double
            val rightArg = args[2] as Double
            val bottomArg = args[3] as Double
            val wrapped: List<Any?> = try {
              api.setAttributionMargins(leftArg, topArg, rightArg, bottomArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isAttributionEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isAttributionEnabled())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setAttributionTintColor$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val colorArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.setAttributionTintColor(colorArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getUri$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getUri())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getJson$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getJson{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLight$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLight())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.isFullyLoaded$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isFullyLoaded())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getLayer(idArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getLayers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLayers())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getSource$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getSource(idArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getSources$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getSources())
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addImage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              api.addImage(nameArg, bytesArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addImages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val imagesArg = args[0] as Map<String, ByteArray>
            val wrapped: List<Any?> = try {
              api.addImages(imagesArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addLayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val layerArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              api.addLayer(layerArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addSource$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val sourceArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              api.addSource(sourceArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setGeoJsonData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val sourceIdArg = args[0] as String
            val jsonStringArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.setGeoJsonData(sourceIdArg, jsonStringArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.setGeoJsonUri$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val sourceIdArg = args[0] as String
            val uriArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.setGeoJsonUri(sourceIdArg, uriArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.addAnnotation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val annotationArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              listOf(api.addAnnotation(annotationArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.updateAnnotation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            val annotationArg = args[1] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              listOf(api.updateAnnotation(idArg, annotationArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getAnnotation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            val wrapped: List<Any?> = try {
              listOf(api.getAnnotation(idArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeLayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.removeLayer(idArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeLayerAt$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val indexArg = args[0] as Long
            val wrapped: List<Any?> = try {
              listOf(api.removeLayerAt(indexArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeSource$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.removeSource(idArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeImage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.removeImage(nameArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeAnnotation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argsArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              api.removeAnnotation(argsArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.removeAllAnnotations$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argsArg = args[0] as Map<String, Any?>
            val wrapped: List<Any?> = try {
              api.removeAllAnnotations(argsArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.showCallout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val annotationIdArg = args[0] as Long
            val titleArg = args[1] as String
            val subtitleArg = args[2] as String?
            val wrapped: List<Any?> = try {
              api.showCallout(annotationIdArg, titleArg, subtitleArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.hideCallout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val annotationIdArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.hideCallout(annotationIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.updateCallout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val annotationIdArg = args[0] as Long
            val titleArg = args[1] as String
            val subtitleArg = args[2] as String?
            val wrapped: List<Any?> = try {
              api.updateCallout(annotationIdArg, titleArg, subtitleArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.hideAllCallouts$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.hideAllCallouts()
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getImage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.getImage(idArg))
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.snapshot$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.snapshot{ result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.triggerRepaint$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.triggerRepaint()
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.resetNorth$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.resetNorth()
              listOf(null)
            } catch (exception: Throwable) {
              PigeonGeneratedPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.downloadRegion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argsArg = args[0] as Map<String, Any?>
            api.downloadRegion(argsArg) { result: Result<Map<Any?, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.cancelDownloadRegion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            api.cancelDownloadRegion(idArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.getRegion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            api.getRegion(idArg) { result: Result<Map<Any?, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.deleteRegion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as Long
            api.deleteRegion(idArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.deleteAllRegions$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.deleteAllRegions{ result: Result<Map<Long, Boolean>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.naxalibre.NaxaLibreHostApi.listRegions$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.listRegions{ result: Result<List<Map<Any?, Any?>>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(PigeonGeneratedPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(PigeonGeneratedPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class NaxaLibreFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by NaxaLibreFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonGeneratedPigeonCodec()
    }
  }
  fun onFpsChanged(fpsArg: Double, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onFpsChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(fpsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onMapLoaded(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapLoaded$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onMapRendered(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapRendered$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onStyleLoaded(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onStyleLoaded$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onMapClick(latLngArg: List<Double>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(latLngArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onMapLongClick(latLngArg: List<Double>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onMapLongClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(latLngArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onAnnotationClick(annotationArg: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onAnnotationClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(annotationArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onAnnotationLongClick(annotationArg: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onAnnotationLongClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(annotationArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onAnnotationDrag(idArg: Long, typeArg: String, geometryArg: Map<String, Any?>, updatedGeometryArg: Map<String, Any?>, eventArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onAnnotationDrag$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(idArg, typeArg, geometryArg, updatedGeometryArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCameraIdle(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraIdle$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCameraMoveStarted(reasonArg: Long?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraMoveStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(reasonArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCameraMove(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraMove$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCameraMoveEnd(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onCameraMoveEnd$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onFling(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onFling$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onRotateStarted(angleThresholdArg: Double, deltaSinceStartArg: Double, deltaSinceLastArg: Double, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onRotateStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(angleThresholdArg, deltaSinceStartArg, deltaSinceLastArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onRotate(angleThresholdArg: Double, deltaSinceStartArg: Double, deltaSinceLastArg: Double, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onRotate$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(angleThresholdArg, deltaSinceStartArg, deltaSinceLastArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onRotateEnd(angleThresholdArg: Double, deltaSinceStartArg: Double, deltaSinceLastArg: Double, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.naxalibre.NaxaLibreFlutterApi.onRotateEnd$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(angleThresholdArg, deltaSinceStartArg, deltaSinceLastArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonGeneratedPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}

private class PigeonGeneratedPigeonStreamHandler<T>(
    val wrapper: PigeonGeneratedPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface PigeonGeneratedPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class StreamEventsStreamHandler : PigeonGeneratedPigeonEventChannelWrapper<NaxaLibreEvent> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: StreamEventsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.naxalibre.NaxaLibreEventChannelApi.streamEvents"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = PigeonGeneratedPigeonStreamHandler<NaxaLibreEvent>(streamHandler)
      EventChannel(messenger, channelName, PigeonGeneratedPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
